# /etc/init/shoryuken.conf - Shoryuken config

# It allows you to manage a single Shoryuken instance with
# Upstart, Ubuntu's native service management tool.
#
# See workers.conf for how to manage all Shoryuken instances at once.
#
# Save this config as /etc/init/shoryuken.conf then manage shoryuken with:
#
#   sudo start shoryuken index=0
#   sudo stop shoryuken index=0
#   sudo status shoryuken index=0
#
# Hack Upstart's reload command to 'quiet' Shoryuken:
#
#   sudo reload shoryuken index=0
#
# or use the service command:
#
#   sudo service shoryuken {start,stop,restart,status}
#

description "Shoryuken Background Worker"

# This script is not meant to start on bootup, workers.conf
# will start all shoryuken instances explicitly when it starts.
# start on runlevel [2345]
# stop on runlevel [06]

# change to match your deployment user
# setuid deploy
# setgid deploy
# env HOME=/home/deploy
env RAILS_ENV=production

respawn
respawn limit 3 30

# Without declaring these as normal exit codes, it just respawns.
normal exit 0 TERM

# Older versions of Upstart might not support the reload command and need
# this commented out.
reload signal TSTP

# Upstart waits 5 seconds by default to kill the a process. Increase timeout to
# give shoryuken process enough time to exit.
kill timeout 15

instance $N

script
# this script runs in /bin/sh by default
# respawn as bash so we can source in rbenv
exec /bin/bash <<'EOT'
  cd /var/www/app
  exec bundle exec shoryuken --config config/shoryuken.yml --rails --pidfile tmp/pids/shoryuken.${N}.pid
EOT
end script
